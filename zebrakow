#!/bin/bash

export SLICE_UNIT="--slice zebrakow.slice"
export REMOTE_HOST=""
export CONTAINER=""
export RUN=""
export SYSTEMD_RUN_MACHINE=""

function machine() {
    if [[ $REMOTE_HOST == "" ]]; then
	MACHINE="$CONTAINER"
	export SYSTEMD_RUN_MACHINE="$CONTAINER"
    elif [[ $CONTAINER == "" ]]; then
	MACHINE="$REMOTE_HOST"
	export SYSTEMD_RUN_MACHINE="$REMOTE_HOST"
    fi
    export RUN="machinectl --quiet $MACHINE shell /bin/bassh -c $@"
}

function metadata() {

    if [[ -e /etc/machine-info ]]; then
	source /etc/machine-info;
    fi
    echo "JOB_ID=$1"
    echo "CMDLINE=$(cat /proc/$(systemctl status $UNIT | grep Main\ PID: | sed s/\ Main\ PID:\ //g | awk '{print $1}')/comm)"
    echo "TIME=Running `systemctl status $UNIT | grep Active | sed s/\ \ \ Active:\ active\ \(running\)\ //g`"
    echo "UNIT=$UNIT"
    echo "SLICE=$(systemctl show -p Slice $UNIT | sed s/Slice=//g )"
    echo "STATUS=$(systemctl status $UNIT | grep Status: | sed s/\ \ \ Status:\ //g)"
    echo "PID=$(systemctl status $UNIT | grep Main\ PID: | sed s/\ Main\ PID:\ //g | awk '{print $1}')"
    echo "--"
    echo "MEMORY=$(systemctl status $UNIT | grep Memory: | awk '{print $2}')"
    echo "TASKS=$(systemctl status $UNIT | grep Tasks: | sed s/\ \ \ \ Tasks:\ //g)"
    echo "CPU=$(systemctl status $UNIT | grep CPU: | awk '{print $2}')"
    echo "CGROUP=$(systemctl status $UNIT | grep CGroup: | awk '{print $2}')"
    echo "IP=$(systemctl status $UNIT | grep IP: | sed s/\ \ \ \ \ \ \ IP:\ //g)"
    echo "LOG_TARGET=$(systemctl show -p StandardOutput $UNIT | sed s/StandardOutput=//g)"
    echo "--"
    echo "MACHINE_HOSTNAME=$(hostname)"
    echo "MACHINE_ID=$(cat /etc/machine-id)"
    echo "MACHINE_PRETTY_HOSTNAME=$(echo $PRETTY_HOSTNAME)"
    echo "MACHINE_LOCATION=$(echo $LOCATION)"
}

function usage() {
    printf "Usage: %s [OPTIONS] {COMMAND}\n" $0
    printf "\nOptions:\n"
    printf "\t-H: Operate on remote host"
    printf "\t-M: Operate on local container"
    printf "\t-l: List running jobs\n"
    printf "\t-h: Display this help\n"
    printf "\t-j: Operate on the job\n"
    printf "\t\t-u: View logs for the job\n"
    printf "\t\t-f: Tail the build log of a running job\n"
    printf "\t\t-m: Display metadata of a running job\n"
    printf "\t\t-s: Display status of a running job's unit\n"
    printf "\t\t-i: Inspect the unit file of a running job\n"
    printf "\t\t-k: Kill the job\n"
    printf "\t-S: Run under this slice unit\n"
    exit 0
}

while getopts "H:M:lhj:S:" opt; do
    case $opt in
	H)
	    if [[ $CONTAINER -ne "" ]]; then
		echo "Only one of -H -or -M may be specified at once" >&2
		exit 1
	    fi
	    export REMOTE_HOST="-H $OPTARG"
	    machine
	    ;;
	M)
	    if [[ $REMOTE_HOST -ne "" ]]; then
		echo "Only one of -H -or -M may be specified at once" >&2
		exit 1
	    fi
	    export CONTAINER="-M $OPTARG"
	    machine
	    ;;
	l)
	    if [[ ! -e /run/zebrakow ]]; then
		echo "/run/zebrakow not found!" >&2
		exit 1
	    fi
	    $RUN tree /run/zebrakow | head -n-1
	    NUM=$($RUN ls -l /run/zebrakow | grep ^d | wc -l)
	    echo
	    echo "$NUM job(s) listed"
	    RUNNING=$($RUN tree /run/zeebrakow | grep RUNNING | wc -l)
	    COMPLETED=$($RUN tree /run/zeebrakow | grep COMPLETED | wc -l)
	    FAILED=$($RUN tree /run/zeebrakow | grep FAILED | wc -l)
	    echo "└── $RUNNING job(s) running"
	    echo "└── $COMPLETED job(s) completed"
	    echo "└── $FAILED job(s) failed"
	    exit 0
	    ;;
	h)
	    usage
	    ;;
	j)
    	    JOB_ID=$OPTARG
	    if [[ ! -e /run/zebrakow/$OPTARG ]]; then
		echo "No jobs with this JOB_ID!" >&2;
		exit 1
	    fi
	    echo
	    UNIT=$($RUN readlink /run/zebrakow/$JOB_ID/UNIT)
	    echo "Unit $UNIT has JOB_ID $JOB_ID"
	    echo
	    shift $((OPTIND-1))
	    case $1 in
		-u)
		    $RUN journalctl -u $UNIT && exit $?
		    ;;
		-f) 
		    $RUN journalctl -f -u $UNIT && exit $?
		    ;;
		-m)
		    $RUN metadata $JOB_ID
		    exit 0
		    ;;
		-s)
		    $RUN systemctl status $UNIT && exit $?
		    ;;
		-i)
		    $RUN systemctl cat $UNIT && exit $?
		    ;;
		-k)
		    $RUN systemctl kill $UNIT && exit $?
		    ;;
		*)
		    echo "Unknown argument. Also, only a single argument may be passed." >&2
		    exit 1
		    ;;
	    esac
	    ;;
	S)
	    SLICE_UNIT="--slice $OPTARG"
	    ;;
	    
	:)
	    echo "Missing option argument for -$OPTARG" >&2;
	    exit 1
	    ;;
        *)
	    echo "Unknown option: -$OPTARG" >&2;
	    exit 1
	    ;;
    esac
done

shift $((OPTIND-1))
systemd-run $SYSTEMD_RUN_MACHINE $SLICE_UNIT -p ExecStartPre=/usr/lib/zebrakow/zebrakow-setup\ --start\ '$INVOCATION_ID' -p Environment=HOME=/root -p ExecStopPost=/usr/lib/zebrakow/zebrakow-setup\ --stop\ '$INVOCATION_ID' $@
