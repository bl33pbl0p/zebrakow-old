#!/bin/bash

export SLICE_UNIT="--slice zebrakow.slice"
export REMOTE_HOST=""
export CONTAINER=""
export RUN=""
export SYSTEMD_RUN_MACHINE=""
export TERMINAL=""
export NAME="$(date +%d-%m-%Y-%H:%M:%S)"

export RUN_CONTAINER_REMOTE=""

function machine() {
    if [[ $REMOTE_HOST == "" ]]; then
	MACHINE="$CONTAINER"
	export RUN="machinectl --quiet $MACHINE shell /bin/bash -c "
	export SYSTEMD_RUN_MACHINE="$CONTAINER"
    elif [[ $CONTAINER == "" ]]; then
	MACHINE="$(echo $REMOTE_HOST | cut -f1 -d:)"
	export SYSTEMD_RUN_MACHINE="-H $REMOTE_HOST"
	export RUN="ssh $MACHINE"
	export REMOTE_CONTAINER="$(echo $REMOTE_HOST | cut -f2- -d:)"
	if [[ "$REMOTE_HOST" != "$REMOTE_CONTAINER" ]]; then
	    RUN_CONTAINER_REMOTE="machinectl --quiet -M $REMOTE_CONTAINER shell /bin/bash -c "; fi
    fi
}

function run() {
    if [[ $RUN == "" ]]; then RUN=/bin/bash\ -c; fi
    $RUN $RUN_CONTAINER_REMOTE "$@"
}

function metadata() {

    if [[ -e /etc/machine-info ]]; then
	source /etc/machine-info;
    fi
    echo "JOB_ID=$1"
    echo "CMDLINE=$(cat /proc/$(systemctl status $UNIT | grep Main\ PID: | sed s/\ Main\ PID:\ //g | awk '{print $1}')/comm)"
    echo "TIME=Running `systemctl status $UNIT | grep Active | sed s/\ \ \ Active:\ active\ \(running\)\ //g`"
    echo "UNIT=$UNIT"
    echo "SLICE=$(systemctl show -p Slice $UNIT | sed s/Slice=//g )"
    echo "STATUS=$(systemctl status $UNIT | grep Status: | sed s/\ \ \ Status:\ //g)"
    echo "PID=$(systemctl status $UNIT | grep Main\ PID: | sed s/\ Main\ PID:\ //g | awk '{print $1}')"
    echo "--"
    echo "MEMORY=$(systemctl status $UNIT | grep Memory: | awk '{print $2}')"
    echo "TASKS=$(systemctl status $UNIT | grep Tasks: | sed s/\ \ \ \ Tasks:\ //g)"
    echo "CPU=$(systemctl status $UNIT | grep CPU: | awk '{print $2}')"
    echo "CGROUP=$(systemctl status $UNIT | grep CGroup: | awk '{print $2}')"
    echo "IP=$(systemctl status $UNIT | grep IP: | sed s/\ \ \ \ \ \ \ IP:\ //g)"
    echo "LOG_TARGET=$(systemctl show -p StandardOutput $UNIT | sed s/StandardOutput=//g)"
    echo "--"
    echo "MACHINE_HOSTNAME=$(hostname)"
    echo "MACHINE_ID=$(cat /etc/machine-id)"
    echo "MACHINE_PRETTY_HOSTNAME=$(echo $PRETTY_HOSTNAME)"
    echo "MACHINE_LOCATION=$(echo $LOCATION)"
}

function usage() {
    printf "Usage: %s [OPTIONS] {COMMAND}\n" $0
    printf "\nOptions:\n"
    printf "\t-H USER@HOST \tOperate on remote host\n"
    printf "\t-M epsilon  \tOperate on local container\n"
    printf "\t-l\t\tList running jobs\n"
    printf "\t-t\t\tAttach to the terminal\n"
    printf "\t-h\t\tDisplay this help\n"
    printf "\t-S foobar.slice Run under this slice unit\n"
    printf "\t-j {job} OPT\tOperate on the job (by NAME or by JOB_ID)\n"
    printf "\t-N foobar   \tSet a name for the job. (DD-MM-YYYY-HH:MM:SS by default)\n"
    printf "\n\tSuboptions for -j:\n"
    printf "\t-u\tView logs for the job\n"
    printf "\t-f\tFollow the build log of a running job\n"
    printf "\t-m\tDisplay metadata of a running job\n"
    printf "\t-s\tDisplay status of a running job's unit\n"
    printf "\t-i\tInspect the unit file of a running job\n"
    printf "\t-k\tKill the job\n"
    printf "\nExamples:\n"
    printf "$ %s -H root@remote.host:container -j zxc887as676a9s8d79as7d21389as2913 -k\n" $0
    exit 0
}

#function state

while getopts "H:M:lthj:N:S:" opt; do
    case $opt in
	H)
	    if [[ "$CONTAINER" != "" ]]; then
		echo "Only one of -H -or -M may be specified at once" >&2
		exit 1
	    fi
	    export REMOTE_HOST="$OPTARG"
	    machine
	    ;;
	M)
	    if [[ "$REMOTE_HOST" != "" ]]; then
		echo "Only one of -H -or -M may be specified at once" >&2
		exit 1
	    fi
	    export CONTAINER="-M $OPTARG"
	    machine
	    ;;
	l)
	    run /bin/true && \
		if [[ ! -e /run/zebrakow ]]; then echo '/run/zebrakow not found!' >&2 && exit 1; fi && \
		tree /run/zebrakow | head -n-1 && \
		NUM=$(ls -l /run/zebrakow | grep ^d | wc -l) && \
		   echo && echo "$NUM job(s) listed" && \
		   RUNNING=$(tree /run/zebrakow | grep RUNNING | wc -l) && \
		   COMPLETED=$(tree /run/zebrakow | grep COMPLETED | wc -l) && \
		   FAILED=$(tree /run/zebrakow | grep FAILED | wc -l) && \
		   echo "└── $RUNNING job(s) running" && \
		   echo "└── $COMPLETED job(s) completed" && \
		   echo "└── $FAILED job(s) failed"
	    exit 0
	    ;;
	t)
	    TERMINAL="--pty"
	    ;;
	h)
	    usage
	    ;;
	j)
	    if [[ ${#OPTARG} == 32 ]]; then
		JOB_ID=$OPTARG
		TYPE=1
	    elif [[ ${#OPTARG} -le 30 ]]; then
		NAME=$OPTARG
	    else
		echo "Invalid spec for NAME or JOB_ID passed. Please pass one of -j or -N, and names less than 30 characters." >&2
		exit 1
	    fi
	    run /bin/true && \
		if [[ $TYPE -eq 1 ]]; then\
		       if [[ ! -e /run/zebrakow/$JOB_ID ]]; then echo 'No jobs with this JOB_ID!' >&2; exit 1; fi && \
			   echo && export UNIT=$(readlink /run/zebrakow/$JOB_ID/UNIT); \
		else \
		    find /run/zebrakow -name *NAME* | while read fname; do \
			if [[ $(readlink $fname) == "$NAME" ]]; then\
			       export UNIT=$(readlink `echo $fname | sed s/NAME/UNIT/g`) && \
				   export JOB_ID="$(systemctl show -p InvocationID $UNIT | sed s/InvocationID=//g)";\
			fi \
	    done \
		fi; \
	    echo "Unit $UNIT has JOB_ID $JOB_ID" && echo && \
		shift $((OPTIND-1)) && \
		case $1 in \
		    -u)\
			journalctl -u $UNIT; exit $?;;\
		    -f)\
			journalctl -u $UNIT; exit $?;;\
		    -m)\
			metadata $JOB_ID &&\
			    exit 0;;\
		    -s)\
			systemctl status $UNIT; exit $?;;\
		    -i)\
			systemctl cat $UNIT; exit $?;;\
		    -k)\
			systemctl kill $UNIT; exit $? ;;\
		    *)\
			echo "Unknown argument. Also, only a single argument may be passed." >&2 && \
			    echo && usage && exit 1 ;;\
		esac
	    
	    ;;
	N)
	    if [[ ${#OPTARG} -le 30 && ${#OPTARG} -gt 0 ]]; then
		NAME=$OPTARG
	    else
		echo "Invalid name sepc. Names should be > 0 and <= 30 chars." >&2
		exit 1
	    fi
	    ;;
		
	S)
	    SLICE_UNIT="--slice $OPTARG"
	    ;;
	    
	:)
	    echo "Missing option argument for -$OPTARG" >&2;
	    exit 1
	    ;;
    esac
done

shift $((OPTIND-1))
systemd-run --no-block $SYSTEMD_RUN_MACHINE $SLICE_UNIT $TERMINAL\
	    -p Type=notify -p NotifyAccess=all \
	    -p ExecStartPre/usr/lib/zebrakow/zebrakow-setup\ --start\ '$INVOCATION_ID'\ '$NAME' \
	    -p Environment=HOME=/root -p Environment=NAME=$NAME\
	    -p ExecStopPost/usr/lib/zebrakow/zebrakow-setup\ --stop\ '$INVOCATION_ID' \
	    $@
